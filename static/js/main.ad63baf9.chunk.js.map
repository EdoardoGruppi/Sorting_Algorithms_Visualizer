{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/HeapSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/BubbleSort.js","SortingAlgorithms/SelectionSort.js","SortingAlgorithms/InsertionSort.js","SortingAlgorithms/ShellSort.js","App.js","reportWebVitals.js","index.js"],"names":["performMergeSort","array","animations","length","arrayCopy","slice","mergeSortHelper","mainArray","start","end","middle","Math","floor","k","i","j","push","merge","quickSortHelper","pivotValue","pivotIndex","heapSortHelper","arrayLength","idx","largest","left","right","SortingVisualizer","useState","setArray","bars","setBars","max","timeIDs","useRef","time","running","algo","resetArray","new_value","randomIntFromInterval","includes","recoverBars","arrayBars","document","getElementsByClassName","style","backgroundColor","height","stopExecution","current","changeButtonText","clearTimeout","useEffect","getElementById","innerText","displaySimpleAnimation","barOneIdx","barTwoIdx","swap","firstBarStyle","secondBarStyle","setTimeout","algos","animation","newHeight","stack","pop","performQuickSort","parseInt","performHeapSort","check","temp","performBubbleSort","min","performSelectionSort","prev","performInsertionSort","gap","performShellSort","id","className","map","value","width","display","type","step","defaultValue","onChange","onClick","random","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ad63baf9.chunk.js","sourcesContent":["export function performMergeSort(array) {\n  const animations = [];\n  // Base case or terminating case\n  if (array.length < 2) return array;\n  const arrayCopy = array.slice();\n  // Otherwise divide the array into two parts\n  mergeSortHelper(array, 0, array.length - 1, arrayCopy, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, start, end, arrayCopy, animations) {\n  // Return if a given array has only one value\n  if (start === end) return;\n  const middle = Math.floor((start + end) / 2);\n  // Divide and operate recursively on the two halves of the passed array\n  mergeSortHelper(arrayCopy, start, middle, mainArray, animations);\n  mergeSortHelper(arrayCopy, middle + 1, end, mainArray, animations);\n  // Merge the two subarrays\n  merge(arrayCopy, start, middle, end, mainArray, animations);\n}\n\nfunction merge(arrayCopy, start, middle, end, mainArray, animations) {\n  let k = start;\n  let i = start;\n  let j = middle + 1;\n  // Compare the two subarrays and push the smaller element in the first position of the two arrays\n  // Do so until one of the two arrays has no items\n  while (i <= middle && j <= end) {\n    animations.push([i, j, 0]);\n    if (arrayCopy[i] <= arrayCopy[j]) {\n      animations.push([k, arrayCopy[i], 1]);\n      mainArray[k++] = arrayCopy[i++];\n    } else {\n      animations.push([k, arrayCopy[j], 1]);\n      mainArray[k++] = arrayCopy[j++];\n    }\n  }\n  // Push the remaining elements from one of the two array\n  // The while loop on the empty array is simply skipped\n  while (i <= middle) {\n    animations.push([k, arrayCopy[i], 1]);\n    mainArray[k++] = arrayCopy[i++];\n  }\n  while (j <= end) {\n    animations.push([k, arrayCopy[j], 1]);\n    mainArray[k++] = arrayCopy[j++];\n  }\n}\n","export function performQuickSort(array) {\n  // Animations list\n  const animations = [];\n  // Creating a stack of the elements to operate with\n  let stack = [];\n  // Adding the initial array as \"unsorted subarray\"\n  stack.push(0);\n  stack.push(array.length - 1);\n\n  // The loop is executed unitl the stack becomes empty\n  while (stack[stack.length - 1] >= 0) {\n    // Extracting the top unsorted subarray\n    let end = stack.pop();\n    let start = stack.pop();\n    // Find pivot index and move smaller number at the left and vice versa\n    let pivotIndex = quickSortHelper(array, start, end, animations);\n    // Add the unsorted subarray at the left of the pivot to the stack\n    if (pivotIndex - 1 > start) {\n      stack.push(start);\n      stack.push(pivotIndex - 1);\n    }\n    // Add the unsorted subarray at the right of the pivot to the stack\n    if (pivotIndex + 1 < end) {\n      stack.push(pivotIndex + 1);\n      stack.push(end);\n    }\n  }\n  return animations;\n}\n\nfunction quickSortHelper(array, start, end, animations) {\n  // Taking the last element as the pivot\n  const pivotValue = array[end];\n  // Cursor position starts from the beginning\n  let pivotIndex = start;\n\n  for (let i = start; i < end; i++) {\n    animations.push([i, end, 0]);\n    if (array[i] < pivotValue) {\n      // Swapping elements if the element is minor than the pivot.\n      // The objective is to have smaller number at the beginning.\n      animations.push([i, pivotIndex, 1]);\n      [array[i], array[pivotIndex]] = [array[pivotIndex], array[i]];\n      // For every item smaller than the pivot, increase the index where\n      // the pivot will be inserted at the end of the loop.\n      pivotIndex++;\n    }\n  }\n  // Move the pivot value in the middle according to how many\n  // smaller numbers have been found.\n  animations.push([end, pivotIndex, 1]);\n  [array[pivotIndex], array[end]] = [array[end], array[pivotIndex]];\n\n  return pivotIndex;\n}\n","export function performHeapSort(array) {\n  const animations = [];\n  let arrayLength = array.length;\n  // Build heap\n  for (let idx = parseInt(arrayLength / 2 - 1); idx >= 0; idx--) {\n    heapSortHelper(array, arrayLength, idx, animations);\n  }\n  // OIterate the elements strating from the last of them\n  for (let idx = arrayLength - 1; idx >= 0; idx--) {\n    // Swap current root with the end.\n    // Remember that when building the heap the biggest number\n    // has been moved into the initial position.\n    animations.push([0, idx, 1]);\n    [array[0], array[idx]] = [array[idx], array[0]];\n    // Call Helper function without considering items in position >= idx\n    heapSortHelper(array, idx, 0, animations);\n  }\n\n  return animations;\n}\n\nfunction heapSortHelper(array, arrayLength, idx, animations) {\n  // At the beginning consider the item at idx as largest\n  let largest = idx;\n  let left = 2 * idx + 1;\n  let right = 2 * idx + 2;\n  // Compare left child with the new root\n  if (left < arrayLength && array[left] > array[largest]) {\n    animations.push([left, largest, 0]);\n    largest = left;\n  }\n  // Compare right child with the new root\n  if (right < arrayLength && array[right] > array[largest]) {\n    animations.push([right, largest, 0]);\n    largest = right;\n  }\n  // Take the smallest child index and swap it with the root\n  if (largest !== idx) {\n    animations.push([largest, idx, 1]);\n    [array[largest], array[idx]] = [array[idx], array[largest]];\n    // Recursively compare the changed root with the other elements\n    heapSortHelper(array, arrayLength, largest, animations);\n  }\n}\n","import {React, useState, useRef, useEffect} from \"react\";\nimport \"./SortingVisualizer.css\";\nimport { performMergeSort } from \"../SortingAlgorithms/MergeSort\";\nimport { performBubbleSort } from \"../SortingAlgorithms/BubbleSort\";\nimport { performSelectionSort } from \"../SortingAlgorithms/SelectionSort\";\nimport { performInsertionSort } from \"../SortingAlgorithms/InsertionSort\";\nimport { performQuickSort } from \"../SortingAlgorithms/QuickSort\";\nimport { performHeapSort } from \"../SortingAlgorithms/HeapSort\";\nimport { performShellSort } from \"../SortingAlgorithms/ShellSort\";\n\n\nexport default function SortingVisualizer() {\n  const [array, setArray] = useState([]);\n  const [bars, setBars] = useState(100);\n  let max = Math.max(...array);\n  // UseRef to maintain value across various re-renders\n  let timeIDs = useRef([])\n  let time = useRef(10)\n  let running = useRef(false)\n  let algo = useRef(null)\n  const maximum = 1000\n\n  // Creates an array of 100 values from 10 to 1000\n  const resetArray = () => {\n    const array = [];\n    for (let i = 0; i < bars; i++) {\n      let new_value = randomIntFromInterval(10, maximum);\n      if (!array.includes(new_value)) {\n        // Start from 10 so to make it visible\n        array.push(new_value);\n      } else i--;\n    }\n    setArray(array);\n  }\n\n  // Ensure that all the bars at the beginning are yellow\n  const recoverBars = () => {\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.backgroundColor = 'yellow';\n      arrayBars[i].style.height = `${(array[i] / max) * 87}vh`;\n    }\n  }\n\n  // Stop the execution of the animation\n  const stopExecution = () => {\n    running.current = false;\n    changeButtonText();\n    for (let i=0; i<timeIDs.current.length; i++){\n      clearTimeout(timeIDs.current[i]);\n    }\n    timeIDs.current = [];\n  }\n\n  const playButtonLogic = () => {\n    if (running.current){ \n      stopExecution(); \n      setArray(array);\n      recoverBars();\n    } else {\n      if (algo.current!==null & algo.current>=0) {\n        running.current = true;\n        changeButtonText();\n        algos[algo.current]();\n      }\n    }\n  }\n\n  // When changing parameters it stops the animation and recreates the arrayBars \n  useEffect(() => {\n    stopExecution();\n    resetArray();\n    recoverBars();\n    //eslint-disable-next-line\n  }, [bars])\n\n  const changeButtonText = () => {\n    const btn = document.getElementById(\"btn\");\n    btn.innerText = running.current ? 'STOP' : 'RUN';\n  }\n\n  const changeSpeedText = () => {\n    time.current = document.getElementById(\"speed\").value;\n    const spn = document.getElementById(\"speed_txt\");\n    spn.innerText = \"SPEED: \" + time.current + \" ms\"\n  }\n  \n  const displaySimpleAnimation = (arrayBars, animations) => {\n    for (let i = 0; i < animations.length; i++) {\n      const [barOneIdx, barTwoIdx, swap] = animations[i];\n      const firstBarStyle = arrayBars[barOneIdx].style;\n      const secondBarStyle = arrayBars[barTwoIdx].style;\n      // Colour the compared bars in red\n      timeIDs.current.push(setTimeout(() => {\n        firstBarStyle.backgroundColor = \"red\";\n        secondBarStyle.backgroundColor = \"red\";\n      }, i * time.current));\n      // Swap the bars only if required\n      if (swap) {\n        timeIDs.current.push(setTimeout(() => {\n          [firstBarStyle.height, secondBarStyle.height] = [\n            secondBarStyle.height,\n            firstBarStyle.height,\n          ];\n        }, (i + 0.5) * time.current));\n      };\n      // Convert the bars colour to the original state\n      timeIDs.current.push(setTimeout(() => {\n        firstBarStyle.backgroundColor = \"yellow\";\n        secondBarStyle.backgroundColor = \"yellow\";\n      }, (i + 1) * time.current));\n    };\n    timeIDs.current.push(setTimeout(()=>{\n      running.current = false;\n      changeButtonText();\n    }, animations.length * time.current))\n  }\n\n  const mergeSort = () => {\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    const animations = performMergeSort(array.slice());\n    for (let i = 0; i < animations.length; i++) {\n      let animation = animations[i];\n      if (animation[2]) {\n        const [barOneIdx, newHeight] = animation;\n        timeIDs.current.push(setTimeout(() => {\n          arrayBars[barOneIdx].style.backgroundColor = \"red\";\n          arrayBars[barOneIdx].style.height = `${(newHeight / max) * 87}vh`;\n        }, i * time.current));\n        timeIDs.current.push(setTimeout(() => {\n          arrayBars[barOneIdx].style.backgroundColor = \"yellow\";\n        }, (i + 1) * time.current));\n      } else {\n        timeIDs.current.push(setTimeout(() => {\n          arrayBars[animation[0]].style.backgroundColor = \"red\";\n          arrayBars[animation[1]].style.backgroundColor = \"red\";\n        }, i * time.current));\n        timeIDs.current.push(setTimeout(() => {\n          arrayBars[animation[0]].style.backgroundColor = \"yellow\";\n          arrayBars[animation[1]].style.backgroundColor = \"yellow\";\n        }, (i + 1) * time.current));\n      }\n    }\n    timeIDs.current.push(setTimeout(()=>{\n      running.current = false;\n      changeButtonText();\n    }, animations.length * time.current))\n  }\n\n  const quickSort = () => {\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    const animations = performQuickSort(array.slice());\n    displaySimpleAnimation(arrayBars, animations);\n  }\n\n  const heapSort = () => {\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    const animations = performHeapSort(array.slice());\n    displaySimpleAnimation(arrayBars, animations);\n  }\n\n  const bubbleSort = () => {\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    const animations = performBubbleSort(array.slice());\n    displaySimpleAnimation(arrayBars, animations);\n  }\n\n  const selectionSort = () => {\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    const animations = performSelectionSort(array.slice());\n    displaySimpleAnimation(arrayBars, animations);\n  }\n\n  const insertionSort = () => {\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    const animations = performInsertionSort(array.slice());\n    displaySimpleAnimation(arrayBars, animations);\n  }\n\n  const shellSort = () => {\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    const animations = performShellSort(array.slice());\n    displaySimpleAnimation(arrayBars, animations);\n  }\n\n  const algos = [mergeSort, quickSort, heapSort, bubbleSort, selectionSort, insertionSort, shellSort]\n\n  return (\n    <>\n      <div id=\"container\">\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                height: `${(value / max) * 87}vh`,\n                // The margin between bars is considered as well\n                width: `${(87 - 0.15 * bars) / bars}vw`,\n              }}\n            ></div>\n          ))}\n        </div>\n\n        <div>\n          <div style={{ display: \"inline-block\" }}>\n            <span className=\"rangeValue\">BARS: {bars}</span>\n            <input\n              className=\"range\"\n              id=\"n_bars\"\n              type=\"range\"\n              min=\"5\"\n              step=\"5\"\n              defaultValue=\"100\"\n              max=\"200\"\n              onChange={() => setBars(document.getElementById(\"n_bars\").value)}\n            ></input>\n          </div>\n\n          <div style={{ display: \"inline-block\" }}>\n            <span className=\"rangeValue\" id='speed_txt'>SPEED: 10 ms</span>\n            <input\n              className=\"range\"\n              id=\"speed\"\n              type=\"range\"\n              min=\"1\"\n              step=\"1\"\n              defaultValue=\"10\"\n              max=\"1000\"\n              onChange={() => {stopExecution(); recoverBars(); changeSpeedText();}}\n            ></input> \n          </div>\n\n          <button\n            className=\"button_slide slide_down\"\n            onClick={() => {stopExecution(); resetArray(); recoverBars();}}\n          >\n            NEW ARRAY\n          </button>\n\n          <select\n            id=\"select_box\"\n            className=\"box slide_down\"\n            onChange={() => {algo.current = document.getElementById(\"select_box\").value;}}\n          >\n            <option value={-1}>ALGORITHM</option>\n            <option value={3}>BUBBLE SORT</option>\n            <option value={1}> QUICK SORT </option>\n            <option value={2}>HEAP SORT</option>\n            <option value={0}>MERGE SORT</option>\n            <option value={4}>SELECTION SORT</option>\n            <option value={5}>INSERTION SORT</option>\n            <option value={6}>SHELL SORT</option>\n          </select>\n\n          <button id='btn'\n            className=\"button_slide slide_down\"\n            onClick={playButtonLogic}\n          >\n            RUN\n          </button>\n\n        </div>\n      </div>\n    </>\n  );\n}\n\n// Function to generate random numbers from min to max, both inclusive\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","export function performBubbleSort(array) {\n  const animations = [];\n  let check = true;\n  // Perform this loop until no swap occurs in the entire while body\n  while (check) {\n    // Variable useful to understand when two items swap\n    check = false;\n    for (let idx = 0; idx < array.length - 1; idx++) {\n      // The swap happens only if an element is greater than that one position after\n      if (array[idx] > array[idx + 1]) {\n        animations.push([idx, idx + 1, 1]);\n        let temp = array[idx];\n        array[idx] = array[idx + 1];\n        array[idx + 1] = temp;\n        check = true;\n      } else {\n        animations.push([idx, idx + 1, 0]);\n      }\n    }\n  }\n  return animations;\n}\n","export function performSelectionSort(array) {\n  const animations = [];\n  for (let i = 0; i < array.length; i++) {\n    // For every iteration find the minimum element in the array\n    let min = i;\n    // Cycle to find the minimum\n    for (let j = i + 1; j < array.length; j++) {\n      animations.push([i, min, 0]);\n      if (array[j] < array[min]) {\n        min = j;\n      }\n    }\n    animations.push([i, min, 0]);\n    // Swap the item in the current position with the minimum one only\n    // if they do not correspond to the same element.\n    if (min !== i) {\n      animations.push([i, min, 1]);\n      let temp = array[i];\n      array[i] = array[min];\n      array[min] = temp;\n    }\n  }\n  return animations;\n}\n","export function performInsertionSort(array) {\n  const animations = [];\n\n  for (let idx = 1; idx < array.length; idx++) {\n    let temp = array[idx];\n    let prev = idx - 1;\n    // Move at the left the current item unitl it succeeds only smaller numbers\n    while (prev > -1 && temp < array[prev]) {\n      // Perform the swap between the two compared items\n      animations.push([prev, prev + 1, 1]);\n      [array[prev + 1], array[prev]] = [array[prev], array[prev + 1]];\n      prev--;\n    }\n  }\n  return animations;\n}\n","export function performShellSort(array) {\n  const animations = [];\n  const arrayLength = array.length;\n\n  // It works as the insetion sort algorithm performed using decreasing intervals\n  // Rearrange elements at each n/2, n/4, n/8, ... intervals\n  let gap = Math.floor(arrayLength / 2);\n  while (gap > 0) {\n    for (let idx = gap; idx < array.length; idx++) {\n      let temp = array[idx];\n      let prev = idx - gap;\n      // Move at the left the current item unitl it succeeds only smaller numbers\n      while (prev > -1 && temp < array[prev]) {\n        animations.push([idx, prev, 0]);\n        // Perform the swap between the two compared items\n        animations.push([prev, prev + gap, 1]);\n        [array[prev + gap], array[prev]] = [array[prev], array[prev + gap]];\n        prev -= gap;\n      }\n    }\n    gap = Math.floor(gap / 2);\n  }\n\n  return animations;\n}\n","import \"./App.css\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}